// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package deps

import (
	"context"
	"fmt"
	"github.com/p4xx07/order-service/app"
	"github.com/p4xx07/order-service/app/domains/inventory"
	"github.com/p4xx07/order-service/app/domains/order"
	"github.com/p4xx07/order-service/app/domains/product"
	"github.com/p4xx07/order-service/app/domains/user"
	"github.com/p4xx07/order-service/configuration"
	"github.com/p4xx07/order-service/internal/db"
	"github.com/redis/go-redis/v9"
	"go.uber.org/zap"
	"gorm.io/gorm"
	"strings"
)

// Injectors from wire.go:

func InjectApp(config *configuration.Configuration, logger *zap.SugaredLogger) (*app.App, error) {
	db, err := ConnectDB(config)
	if err != nil {
		return nil, err
	}
	iStore := order.NewStore(db)
	inventoryIStore := inventory.NewStore(db)
	iService := inventory.NewService(inventoryIStore, config, logger)
	orderIService := order.NewService(config, logger, iStore, iService)
	iHandler := order.NewHandler(orderIService, logger)
	appApp := &app.App{
		OrderHandler: iHandler,
	}
	return appApp, nil
}

// wire.go:

func ConnectDB(configuration2 *configuration.Configuration) (*gorm.DB, error) {
	database, err := db.ConnectDB(configuration2)
	if err != nil {
		return nil, err
	}

	err = database.AutoMigrate(user.User{}, product.Product{}, inventory.Inventory{}, order.Order{}, order.OrderItem{})

	if err != nil {
		if !strings.Contains(err.Error(), "already exists") {
			return nil, err
		}
	}

	return database, nil
}

func InitRedisClient(configuration2 *configuration.Configuration) (*redis.Client, error) {
	client := redis.NewClient(&redis.Options{
		Addr:     configuration2.RedisHost,
		Password: configuration2.RedisPassword,
		DB:       configuration2.RedisDatabase,
	})

	_, err := client.Ping(context.Background()).Result()
	if err != nil {
		return nil, err
	}
	fmt.Println("Redis connected successfully")
	return client, nil
}
